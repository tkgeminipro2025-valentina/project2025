import React, { useState } from 'react';
import { Task, Contact, Deal, Project } from '../types';

interface AddTaskFormProps {
  // FIX: Omitted 'createdAt' and 'status' from the task type to match the parent component's handler, as these values are generated by the database or have default initial values.
  onAddTask: (task: Omit<Task, 'id' | 'createdAt' | 'status'>) => void;
  onClose: () => void;
  contacts: Contact[];
  deals: Deal[];
  projects: Project[];
}

const AddTaskForm: React.FC<AddTaskFormProps> = ({ onAddTask, onClose, contacts, deals, projects }) => {
  const [title, setTitle] = useState('');
  const [dueDate, setDueDate] = useState('');
  const [priority, setPriority] = useState<'High' | 'Medium' | 'Low'>('Medium');
  const [relatedTo, setRelatedTo] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!title || !dueDate) return;

    let relatedToObject: { type: 'deal' | 'contact' | 'project'; id: string } | undefined = undefined;
    if (relatedTo) {
        let type: string | undefined;
        let id: string | undefined;

        if (relatedTo.includes(':')) {
            const [parsedType, ...idParts] = relatedTo.split(':');
            type = parsedType;
            id = idParts.join(':');
        } else if (relatedTo.includes('-')) {
            const [parsedType, ...idParts] = relatedTo.split('-');
            type = parsedType;
            id = idParts.join('-');
        }

        if (
            type &&
            id &&
            (type === 'deal' || type === 'contact' || type === 'project')
        ) {
            relatedToObject = {
                type: type as 'deal' | 'contact' | 'project',
                id,
            };
        }
    }

    onAddTask({ title, dueDate, priority, relatedTo: relatedToObject });
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div>
        <label htmlFor="title" className="block text-sm font-medium text-text-secondary">Task Title</label>
        <input type="text" id="title" value={title} onChange={e => setTitle(e.target.value)} required className="mt-1 block w-full bg-background border border-border rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-primary focus:border-primary" />
      </div>
      <div>
        <label htmlFor="dueDate" className="block text-sm font-medium text-text-secondary">Due Date</label>
        <input type="date" id="dueDate" value={dueDate} onChange={e => setDueDate(e.target.value)} required className="mt-1 block w-full bg-background border border-border rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-primary focus:border-primary" />
      </div>
       <div>
        <label htmlFor="priority" className="block text-sm font-medium text-text-secondary">Priority</label>
        <select id="priority" value={priority} onChange={e => setPriority(e.target.value as any)} className="mt-1 block w-full bg-background border border-border rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-primary focus:border-primary">
            <option>Low</option>
            <option>Medium</option>
            <option>High</option>
        </select>
      </div>
      <div>
        <label htmlFor="relatedTo" className="block text-sm font-medium text-text-secondary">Related To (Optional)</label>
        <select id="relatedTo" value={relatedTo} onChange={e => setRelatedTo(e.target.value)} className="mt-1 block w-full bg-background border border-border rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-primary focus:border-primary">
            <option value="">None</option>
            <optgroup label="Deals">
                {deals.map(d => (
                    <option key={`deal-${d.id}`} value={`deal:${d.id}`}>
                        {d.dealName}
                    </option>
                ))}
            </optgroup>
             <optgroup label="Contacts">
                {contacts.map(c => (
                    <option key={`contact-${c.id}`} value={`contact:${c.id}`}>
                        {c.fullName}
                    </option>
                ))}
            </optgroup>
            <optgroup label="Projects">
                {projects.map(p => (
                    <option key={`project-${p.id}`} value={`project:${p.id}`}>
                        {p.projectName}
                    </option>
                ))}
            </optgroup>
        </select>
      </div>
      <div className="flex justify-end space-x-3 pt-4">
        <button type="button" onClick={onClose} className="px-4 py-2 border border-border rounded-md text-sm font-medium text-text-primary hover:bg-secondary">Cancel</button>
        <button type="submit" className="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary hover:bg-primary-hover">Add Task</button>
      </div>
    </form>
  );
};

export default AddTaskForm;
